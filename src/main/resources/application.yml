server:
  port: 8087 #8080이 기본이지만, oracle이 설치되어 있으면 포트 충돌날 가능성이 있어서, 8087 등으로 변경해서 사용!

spring:
  datasource:
    # local
    url: jdbc:mysql://localhost:3306/study?useUnicode=true&characterEncoding=utf-8
    username: root
    password: hjh0107
    driver-class-name: com.mysql.cj.jdbc.Driver

    #히카리 풀 - data source의 pool 관리. 자원 알아서 할당&해제
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true
  output.ansi.enabled: always

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
      # create, update, none, create-drop, validate 이렇게 다섯 개의 옵션이 있지만,
      # - create : 주로 개발 중에 테스트용으로 계속 데이터 갈아엎었다가 새로할 때 많이 씀. 근데 다 날아가서 위험하니까 꼭 확인하고 사용!!
      # - update : 개발 중 기존의 스키마는 그대로 두고, 새로 테이블 생성/컬럼 추가 등 새롭게 추가된 내용만 업데이트 됨. 위험부담은 없지만 삭제는 일일이 해줘야 함.
      # - none : 주로 개발 완료 후 none으로 바꿔 놓음! 위험가능성을 아예 차단시켜버리기,,
      # - validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
    generate-ddl: false
    properties:
      hibernate:
        auto_quote_keyword: true  # 모든 예약어에 대해 따옴표를 추가하는 설정
        #        dialect:
        #        default_schema:
        show_sql: true # 쿼리를 출력해준다.
        format_sql: true # 쿼리를 예쁘게 출력해준다.
    defer-datasource-initialization: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: Asia/Seoul

  mvc:
    log-request-details: true # request의 parameter 값 등을 log에서 못 보는 설정 해제

logging:
  level:
    org:
      springframework:
        web: trace
        http: trace
#          servlet:
#            mvc:
#              method: trace
#    org.hibernate.SQL : debug